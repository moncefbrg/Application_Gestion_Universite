package com.example.demo.services.fichierexcel;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entities.Module;
import com.example.demo.entities.Classe;
import com.example.demo.entities.Element;
import com.example.demo.entities.Enseignant;
import com.example.demo.entities.Etudiant;
import com.example.demo.repositories.IClasse;
import com.example.demo.repositories.IModule;
import com.example.demo.repositories.IResultatElement;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Year;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class FichierExcelServiceimpl implements IFichierExcelService {
	@Autowired
	private IModule iModule;
	@Autowired
	private IClasse iClasse;
	@Autowired
	private IResultatElement iResultatElement;

	@Override
	public File creationFichierNoteExcel(String classe, String session, String module, String path) throws IOException {
	    // Vérification de l'existence du module et de la classe
	    if (iModule.findByNom(module).isEmpty()) {
	        throw new IllegalArgumentException("Ce module n'existe pas");
	    }
	    if (iClasse.findByNom(classe).isEmpty()) {
	        throw new IllegalArgumentException("Cette classe n'existe pas");
	    }

	    // Vérification de la session
	    if (!session.equalsIgnoreCase("Normale") && !session.equalsIgnoreCase("Rattrapage")) {
	        throw new RuntimeException("La session est incorrecte. Les valeurs autorisées sont 'Normale' ou 'Rattrapage'.");
	    }

	    // Vérification de la cohérence de niveau entre la classe et le module
	    if (!iClasse.findByNom(classe).get().getNiveau().equals(iModule.findByNom(module).get().getNiveau())) {
	        throw new RuntimeException("Incohérence de niveau entre classe et module.");
	    }

	    // Créer un nouveau classeur Excel
	    Workbook workbook = new XSSFWorkbook();
	    Sheet sheet = workbook.createSheet("Notes");

	    // Obtenir l'année actuelle et l'année suivante
	    Year currentYear = Year.now();
	    String anneeScolaire = currentYear + "/" + (currentYear.getValue() + 1);

	    // Créer une police pour le style des en-têtes
	    Font headerFont = workbook.createFont();
	    headerFont.setBold(true);
	    headerFont.setFontHeightInPoints((short) 12);
	    headerFont.setColor(IndexedColors.WHITE.getIndex()); // Texte en blanc

	    // Créer un style pour les en-têtes
	    CellStyle headerCellStyle = workbook.createCellStyle();
	    headerCellStyle.setFont(headerFont);
	    headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex()); // Fond bleu clair
	    headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	    headerCellStyle.setBorderTop(BorderStyle.THIN); // Bordure en haut
	    headerCellStyle.setBorderBottom(BorderStyle.THIN); // Bordure en bas
	    headerCellStyle.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
	    headerCellStyle.setBorderRight(BorderStyle.THIN); // Bordure à droite
	    headerCellStyle.setAlignment(HorizontalAlignment.CENTER); // Centrer le texte

	    // Créer un style pour la ligne vide
	    CellStyle laLigneVide = workbook.createCellStyle();
	    laLigneVide.setFillForegroundColor(IndexedColors.GREY_40_PERCENT.getIndex()); // Fond gris
	    laLigneVide.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	    laLigneVide.setBorderTop(BorderStyle.THIN); // Bordure en haut
	    laLigneVide.setBorderBottom(BorderStyle.THIN); // Bordure en bas
	    laLigneVide.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
	    laLigneVide.setBorderRight(BorderStyle.THIN); // Bordure à droite

	    // Créer un style pour les cellules de données
	    CellStyle dataCellStyle = workbook.createCellStyle();
	    dataCellStyle.setBorderTop(BorderStyle.THIN); // Bordure en haut
	    dataCellStyle.setBorderBottom(BorderStyle.THIN); // Bordure en bas
	    dataCellStyle.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
	    dataCellStyle.setBorderRight(BorderStyle.THIN); // Bordure à droite
	    dataCellStyle.setAlignment(HorizontalAlignment.CENTER); // Centrer le texte

	    // Créer la première ligne pour les en-têtes
	    String semestre = iModule.findByNom(module).get().getSemestre();
	    Row headerRow1 = sheet.createRow(0);
	    String[] headers1 = {"Module", module, "Semestre", semestre, "Année", anneeScolaire};
	    for (int i = 0; i < headers1.length; i++) {
	        Cell cell = headerRow1.createCell(i);
	        cell.setCellValue(headers1[i]);
	        cell.setCellStyle(headerCellStyle);
	    }

	    // Créer la deuxième ligne pour les en-têtes
	    String enseignantNom = iModule.findByNom(module).get().getEnseignant().getNom();
	    String enseignantPrenom = iModule.findByNom(module).get().getEnseignant().getPrenom();
	    String enseignant = enseignantNom + " " + enseignantPrenom;
	    Row headerRow2 = sheet.createRow(1);
	    String[] headers2 = {"Enseignant", enseignant, "Session", session, "Classe", classe};
	    for (int i = 0; i < headers2.length; i++) {
	        Cell cell = headerRow2.createCell(i);
	        cell.setCellValue(headers2[i]);
	        cell.setCellStyle(headerCellStyle);
	    }

	    // Créer une ligne vide avec un fond gris
	    Row headerRowVide = sheet.createRow(2);
	    for (int i = 0; i < headers1.length; i++) {
	        Cell cell = headerRowVide.createCell(i);
	        cell.setCellStyle(laLigneVide); // Appliquer le style de la ligne vide
	    }

	    // Créer la quatrième ligne pour les en-têtes
	    List<Element> elements = iModule.findByNom(module).get().getElements();
	    Element elementA = elements.get(0);
	    Element elementB = elements.get(1);
	    Row headerRow4 = sheet.createRow(3);
	    String[] headers4 = {"ID", "CNE", "NOM", "PRENOM", elementA.getNom(), elementB.getNom(), "MOYENNE", "VALIDATION"};
	    for (int i = 0; i < headers4.length; i++) {
	        Cell cell = headerRow4.createCell(i);
	        cell.setCellValue(headers4[i]);
	        cell.setCellStyle(headerCellStyle);
	    }

	    // Remplir les données des étudiants
	    List<Etudiant> etudiants = iClasse.findByNom(classe).get().getEtudiants();
	    Classe classeBD = iClasse.findByNom(classe).get();
	    //String formule = iFormule.findByNiveauAndNom(classeBD.getNiveau(), "AVERAGE").get().toString();
	    double X = classeBD.getNiveau().getSeuil().getXNormale();
	    double Y = classeBD.getNiveau().getSeuil().getYRattrapage();

	    for (int i = 0; i < etudiants.size(); i++) {
	        Row dataRow = sheet.createRow(i + 4); // Commencer à la ligne 4
	        Etudiant etudiant = etudiants.get(i);

	        // Remplir les données pour ID, CNE, NOM, PRENOM
	        dataRow.createCell(0).setCellValue(etudiant.getId().toString());
	        dataRow.createCell(1).setCellValue(etudiant.getCne());
	        dataRow.createCell(2).setCellValue(etudiant.getNom());
	        dataRow.createCell(3).setCellValue(etudiant.getPrenom());

	        // Remplir les données pour ELEMENT A et ELEMENT B
	        double noteA = iResultatElement.findByElementAndSessionAndEtudiant(elementA, session, etudiant).get().getNote();
	        double noteB = iResultatElement.findByElementAndSessionAndEtudiant(elementB, session, etudiant).get().getNote();
	        dataRow.createCell(4).setCellValue(noteA);
	        dataRow.createCell(5).setCellValue(noteB);

	        // Ajouter la formule pour la MOYENNE (colonne G)
	        Cell moyenneCell = dataRow.createCell(6);
	        moyenneCell.setCellFormula("AVERAGE(E" + (i + 4) + ":F" + (i + 4) + ")");
	        moyenneCell.setCellStyle(dataCellStyle);

	        // Ajouter la formule pour la VALIDATION (colonne H)
	        Cell validationCell = dataRow.createCell(7);
	        if (session.equalsIgnoreCase("Normale")) {
	            validationCell.setCellFormula("IF(G" + (i + 4) + ">=" + X + ",\"Validé\",\"Non validé\")");
	        } else if (session.equalsIgnoreCase("Rattrapage")) {
	            validationCell.setCellFormula("IF(G" + (i + 4) + ">=" + Y + ",\"Validé\",\"Non validé\")");
	        }
	        validationCell.setCellStyle(dataCellStyle);
	    }

	    // Ajuster la largeur des colonnes
	    for (int i = 0; i < headers4.length; i++) {
	        sheet.autoSizeColumn(i);
	    }

	    // Créer le dossier s'il n'existe pas
	    File resourcesDir = new File(path);
	    if (!resourcesDir.exists()) {
	        resourcesDir.mkdirs();
	    }

	    // Générer un nom de fichier unique
	    String baseFileName = "Notes_" + classe + "_" + session;
	    String fileExtension = ".xlsx";
	    File file = new File(path + File.separator + baseFileName + fileExtension);

	    // Vérifier si le fichier existe déjà
	    int counter = 1;
	    while (file.exists()) {
	        file = new File(path + File.separator + baseFileName + "_" + counter + fileExtension);
	        counter++;
	    }

	    // Écrire le fichier Excel
	    try (FileOutputStream fileOut = new FileOutputStream(file)) {
	        workbook.write(fileOut);
	    } finally {
	        workbook.close();
	    }

	    return file;
	}
	
	@Override
	public boolean checkFormat(File fichier, List<String> liste,int nbrColonne) {
	    try (FileInputStream fis = new FileInputStream(fichier);
	         Workbook workbook = new XSSFWorkbook(fis)) {

	        // Vérifier le format des colonnes
	        if (!checkNbrColonnes(fichier, nbrColonne)) {
	            // Si les colonnes ne respectent pas le format, retourner false
	            return false;
	        }

	        Sheet sheet = workbook.getSheetAt(0);  // On travaille avec la première feuille

	        // Parcours des lignes à partir de la ligne 2 (index 1 dans Excel)
	        for (int ligneIndex = 1; ligneIndex <= sheet.getLastRowNum(); ligneIndex++) {
	            Row row = sheet.getRow(ligneIndex);

	            if (row == null) continue;  // Si la ligne est vide, on passe à la suivante

	            // Parcours des colonnes de chaque ligne
	            for (int colIndex = 0; colIndex < liste.size(); colIndex++) {
	                // Récupérer le type attendu depuis la liste
	                String typeAttendu = liste.get(colIndex);

	                // Récupérer le type réel de la cellule
	                String typeCellule = formatTypeDonnee(fichier, colIndex, ligneIndex);

	                // Comparer le type attendu avec le type réel
	                if (!typeAttendu.equals(typeCellule)) {
	                    // Si les types ne correspondent, retourner false
	                    System.err.println("Erreur à la ligne " + (ligneIndex + 1) + ", colonne " + (colIndex + 1) +
	                            ": Attendu '" + typeAttendu + "', trouvé '" + typeCellule + "'.");
	                    return false;
	                }
	            }
	        }

	        // Si tout est correct, retourner true
	        return true;

	    } catch (Exception e) {
	        // Si une exception est lancée, log l'erreur et retourner false
	        System.err.println("Erreur lors de la vérification du format: " + e.getMessage());
	        return false;
	    }
	}


    @Override
    public boolean checkNbrColonnes(File fichier, int nbr) throws Exception {
        try (FileInputStream fis = new FileInputStream(fichier);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Récupérer la première feuille
            Sheet sheet = workbook.getSheetAt(0);

            // Vérifier le nombre de colonnes
            Row firstRow = sheet.getRow(0);
            if (firstRow == null) {
                throw new IllegalArgumentException("La première ligne est vide.");
            }

            int nbrReelColonnes = firstRow.getPhysicalNumberOfCells();
            if (nbrReelColonnes != nbr) {
                throw new IllegalArgumentException("Nombre de colonnes incorrect. Attendu : " + nbr + ", Trouvé : " + nbrReelColonnes);
            }

        } catch (IOException e) {
            throw new Exception("Erreur lors de la lecture du fichier : " + e.getMessage(), e);
        }
        return true;
    }

    @Override
    public String formatTypeDonnee(File fichier, int colonne, int ligne) throws Exception {
        try (FileInputStream fis = new FileInputStream(fichier);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Récupérer la première feuille
            Sheet sheet = workbook.getSheetAt(0);

            // Vérifier la ligne spécifiée
            Row row = sheet.getRow(ligne);
            if (row == null) {
                throw new IllegalArgumentException("La ligne " + ligne + " est vide.");
            }

            // Vérifier la cellule spécifiée
            Cell cell = row.getCell(colonne, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            return getCellTypeAsString(cell);

        } catch (IOException e) {
            throw new Exception("Erreur lors de la lecture du fichier : " + e.getMessage(), e);
        }
    }
    @Override
    // Méthode pour déterminer le type de la cellule sous forme de chaîne de caractères
    public String getCellTypeAsString(Cell cell) {
        switch (cell.getCellType()) {
            case STRING:
                return "STRING";
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return "DATE";
                } else {
                    return "NUMERIC";
                }
            case BOOLEAN:
                return "BOOLEAN";
            case FORMULA:
                return "FORMULA";
            case BLANK:
                return "BLANK";
            default:
                return "UNKNOWN";
        }
    }
    @Override
    public List<String> lireLigne(Row row,int nbrColonnes) {
	    List<String> ligneData = new ArrayList<>();
	    for (int colonneIndex = 0; colonneIndex < nbrColonnes; colonneIndex++) { 
	        Cell cell = row.getCell(colonneIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
	        ligneData.add(lireValeurCellule(cell));
	    }
	    return ligneData;
	}
    @Override
    public String lireValeurCellule(Cell cell) {
	    switch (cell.getCellType()) {
	        case STRING:
	            return cell.getStringCellValue();
	        case NUMERIC:
	            if (DateUtil.isCellDateFormatted(cell)) {
	                return cell.getDateCellValue().toString();
	            } else {
	                return String.valueOf((int) cell.getNumericCellValue());
	            }
	        case BOOLEAN:
	            return String.valueOf(cell.getBooleanCellValue());
	        case BLANK:
	            return ""; // Cellule vide
	        default:
	            throw new IllegalStateException("Type de cellule non géré : " + cell.getCellType());
	    }
	}
    
    @Override
    public String verifierFormatFichierExcel(File file) throws IOException {
        if (file == null || !file.exists()) {
            throw new IllegalArgumentException("Le fichier n'existe pas ou est null.");
        }

        // Utilisation du try-with-resources pour garantir la fermeture automatique du flux
        try (FileInputStream fis = new FileInputStream(file)) {
            try(Workbook workbook = new XSSFWorkbook(fis);){
                // Essayer de lire le fichier comme un fichier .xlsx
                return "XLSX";
            } catch (IOException e) {
                // Si ce n'est pas un fichier .xlsx, essayer de lire comme un fichier .xls
                try(Workbook workbook = new HSSFWorkbook(fis);){
                    return "XLS";
                } catch (IOException ex) {
                    // Si ni .xlsx ni .xls, retourner "INCONNU"
                    return "INCONNU";
                }
            }
        }
    }
    
    @Override
    public boolean verifierNotesFichierExcel(File file) throws IOException {
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);

            // Commencer à la ligne 5 
            for (int i = 4; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) {
                    continue; // Ignorer les lignes vides
                }

                // Colonnes ELEMENT 1 (index 4) et ELEMENT 2 (index 5)
                Cell cell4 = row.getCell(4); // ELEMENT 1
                Cell cell5 = row.getCell(5); // ELEMENT 2

                // Vérifier si les cellules sont null ou non numériques
                if (cell4 == null || cell5 == null) {
                    throw new IllegalArgumentException("Erreur à la ligne " + (i + 1) + ": Les cellules des notes sont manquantes.");
                }
                if (cell4.getCellType() != CellType.NUMERIC || cell5.getCellType() != CellType.NUMERIC) {
                    throw new IllegalArgumentException("Erreur à la ligne " + (i + 1) + ": Les notes doivent être des valeurs numériques.");
                }

                double note4 = cell4.getNumericCellValue();
                double note5 = cell5.getNumericCellValue();

                // Vérifier les conditions sur les notes
                if (note4 <= 0 || note5 <= 0) {
                    throw new IllegalArgumentException("Erreur à la ligne " + (i + 1) + ": Les notes doivent être supérieures à 0.");
                }
                if (note4 > 20 || note5 > 20) {
                    throw new IllegalArgumentException("Erreur à la ligne " + (i + 1) + ": Les notes ne doivent pas dépasser 20.");
                }
            }
        } catch (IOException e) {
            throw new IOException("Erreur lors de la lecture du fichier Excel.", e);
        }

        return true; // Si toutes les notes sont valides
    }
    
    @Override
    public File creationFichierDeliberation(String path, String anneeUniversitaire, String dateDeliberation, String classe,
             List<String> etudiants) throws IOException {
    Workbook workbook = new XSSFWorkbook();
    Sheet sheet = workbook.createSheet("Délibération");

    // Créer une police en gras pour les en-têtes
    Font headerFont = workbook.createFont();
    headerFont.setBold(true);
    headerFont.setFontHeightInPoints((short) 12);
    CellStyle headerStyle = workbook.createCellStyle();
    headerStyle.setFont(headerFont);
    headerStyle.setBorderBottom(BorderStyle.THIN);
    headerStyle.setBorderTop(BorderStyle.THIN);
    headerStyle.setBorderLeft(BorderStyle.THIN);
    headerStyle.setBorderRight(BorderStyle.THIN);
    headerStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
    headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
    headerStyle.setAlignment(HorizontalAlignment.CENTER);  // Alignement horizontal au centre
    headerStyle.setVerticalAlignment(VerticalAlignment.CENTER);  // Alignement vertical au centre
  
    
 // Créer style deds cellules vides
    CellStyle celluleVideStyle = workbook.createCellStyle();
    celluleVideStyle.setBorderBottom(BorderStyle.THIN);
    celluleVideStyle.setBorderTop(BorderStyle.THIN);
    celluleVideStyle.setBorderLeft(BorderStyle.THIN);
    celluleVideStyle.setBorderRight(BorderStyle.THIN);
    celluleVideStyle.setAlignment(HorizontalAlignment.CENTER);

    // Créer une police normale pour les données
    Font dataFont = workbook.createFont();
    dataFont.setFontHeightInPoints((short) 11);
    CellStyle dataStyle = workbook.createCellStyle();
    dataStyle.setFont(dataFont);
    dataStyle.setBorderBottom(BorderStyle.THIN);
    dataStyle.setBorderTop(BorderStyle.THIN);
    dataStyle.setBorderLeft(BorderStyle.THIN);
    dataStyle.setBorderRight(BorderStyle.THIN);
    dataStyle.setAlignment(HorizontalAlignment.CENTER);

    // Créer la ligne d'en-tête
    Year currentYear = Year.now();
    String anneeScolaire = currentYear + "/" + (currentYear.getValue() + 1);
    Row headerRow = sheet.createRow(0);
    createCell(headerRow, 0,"Annee universitaire" , headerStyle);
    createCell(headerRow, 1, anneeScolaire, celluleVideStyle);
    createCell(headerRow, 2, "Date deliberation", headerStyle);
    createCell(headerRow, 3, dateDeliberation, celluleVideStyle);
    
 // Créer la deuxieme ligne
    Row ligneVide = sheet.createRow(1);
    createCell(ligneVide, 0, null, celluleVideStyle);
    createCell(ligneVide, 1, null, celluleVideStyle);
    createCell(ligneVide, 2, null, celluleVideStyle);
    createCell(ligneVide, 3, null, celluleVideStyle);
    

    Row classRow = sheet.createRow(2);
    createCell(classRow, 0, "Classe", headerStyle);
    createCell(classRow, 1, classe, celluleVideStyle);
    createCell(classRow, 2, null, headerStyle);
    createCell(classRow, 3, null, headerStyle);

    // Créer les en-têtes des modules
    Row moduleHeaderRow = sheet.createRow(4);
    createCell(moduleHeaderRow, 0, "ID ETUDIANT", headerStyle);
    createCell(moduleHeaderRow, 1, "CNE", headerStyle);
    createCell(moduleHeaderRow, 2, "NOM", headerStyle);
    createCell(moduleHeaderRow, 3, "PRENOM", headerStyle);
    
 // Créer les en-têtes vide dessous du 6ieme ligne
    Row enteteVide = sheet.createRow(5);
    createCell(enteteVide, 0, null, headerStyle);
    createCell(enteteVide, 1, null, headerStyle);
    createCell(enteteVide, 2, null, headerStyle);
    createCell(enteteVide, 3, null, headerStyle);
    List<Module> modules=iClasse.findByNom(classe).get().getNiveau().getModules();
    List<Enseignant> enseignants=modules.stream().map(module->module.getEnseignant()).collect(Collectors.toList());
    int cellIndex = 4;
    for (int i = 0; i < modules.size(); i++) {
        createCell(moduleHeaderRow, cellIndex, modules.get(i) + " (" + enseignants.get(i) + ")", headerStyle);
        sheet.addMergedRegion(new CellRangeAddress(4, 4, cellIndex, cellIndex + 1)); // Fusionner avec la cellule à droite
        cellIndex += 2;
        createCell(moduleHeaderRow, cellIndex++, "Moyenne", headerStyle);
        createCell(moduleHeaderRow, cellIndex++, "Validation", headerStyle);
    }
    createCell(moduleHeaderRow, cellIndex, "Moyenne generale", headerStyle);
    createCell(moduleHeaderRow, cellIndex + 1, "Rang", headerStyle);

    // Ajouter les noms des éléments sous les modules
    Row elementHeaderRow = sheet.createRow(5);
    for(int j=0;j<modules.size();j++) {
    	List<Element> elements=modules.get(j).getElements();
        for (int i = 0; i < modules.size(); i++) {
        	cellIndex = i+4;
            createCell(elementHeaderRow, cellIndex++, elements.get(1).getNom(), headerStyle);
            createCell(elementHeaderRow, cellIndex++, elements.get(2).getNom(), headerStyle);
            createCell(elementHeaderRow, cellIndex++, "", headerStyle);
            createCell(elementHeaderRow, cellIndex++, "", headerStyle);
        }
    }

    // Fusionner les cellules "ID ETUDIANT", "CNE", "NOM", "PRENOM", "Moyenne generale", "Rang", "moyenne", "validation"
    sheet.addMergedRegion(new CellRangeAddress(4, 5, 0, 0)); // ID ETUDIANT
    sheet.addMergedRegion(new CellRangeAddress(4, 5, 1, 1)); // CNE
    sheet.addMergedRegion(new CellRangeAddress(4, 5, 2, 2)); // NOM
    sheet.addMergedRegion(new CellRangeAddress(4, 5, 3, 3)); // PRENOM
    
    sheet.addMergedRegion(new CellRangeAddress(4, 5, cellIndex, cellIndex)); // Moyenne generale
    sheet.addMergedRegion(new CellRangeAddress(4, 5, cellIndex + 1, cellIndex + 1)); // Rang

    // Ajouter les données des étudiants
    //List<Etudiant> etudiant=iClasse.findByNom(classe).get().getEtudiants();
    //List<Long> idEtudiants = etudiant.stream().map(etudiant->etudiant.getId()).collect(Collectors.toList());
    //List<String> cneEtudiants=etudiant.stream().map(etudiant->etudiant.getCne()).collect(Collectors.toList());
    //List<String> nomEtudiants=etudiant.stream().map(etudiant->etudiant.getNom()).collect(Collectors.toList());
    //List<String> prenomEtudiants=etudiant.stream().map(etudiant->etudiant.getPrenom()).collect(Collectors.toList());
    


    int rowIndex = 6;
    for (String etudiant : etudiants) {
        Row row = sheet.createRow(rowIndex++);
        createCell(row, 0, "ID1", dataStyle);
        createCell(row, 1, "CNE", dataStyle);
        createCell(row, 2, "NOM", dataStyle);
        createCell(row, 3, etudiant, dataStyle);

        cellIndex = 4;
        for (int i = 0; i < modules.size(); i++) {
            createCell(row, cellIndex++, "12", dataStyle);
            createCell(row, cellIndex++, "12", dataStyle);
            createCell(row, cellIndex++, "12", dataStyle);
            createCell(row, cellIndex++, "V", dataStyle);
        }
        createCell(row, cellIndex, "18", dataStyle);
        createCell(row, cellIndex + 1, "20", dataStyle);
    }

    // Ajuster la largeur des colonnes
    for (int i = 0; i < cellIndex + 2; i++) {
        sheet.autoSizeColumn(i);
    }

    // Créer le dossier s'il n'existe pas
    File resourcesDir = new File(path);
    if (!resourcesDir.exists()) {
        resourcesDir.mkdirs();
    }

    // Générer un nom de fichier unique
    String baseFileName = "Fichier_Deliberation";
    String fileExtension = ".xlsx";
    File file = new File(path + File.separator + baseFileName + fileExtension);

    int counter = 1;
    while (file.exists()) {
        file = new File(path + File.separator + baseFileName + "_" + counter + fileExtension);
        counter++;
    }

    // Écrire le fichier Excel
    try (FileOutputStream fileOut = new FileOutputStream(file)) {
        workbook.write(fileOut);
    } finally {
        workbook.close();
    }

    return file;
}
    @Override
    public Cell createCell(Row row, int column, String value, CellStyle style) {
        Cell cell = row.createCell(column);
        cell.setCellValue(value);
        cell.setCellStyle(style);
        return cell;
    }
    @Override
    public boolean validateExcelStructure(String filePath) {
        try (FileInputStream file = new FileInputStream(filePath);
             Workbook workbook = new XSSFWorkbook(file)) {

            Sheet sheet = workbook.getSheetAt(0); // Supposons que la structure est dans la première feuille

            // Vérifier les en-têtes
            if (!validateHeaders(sheet)) {
                System.out.println("Échec de la validation des en-têtes.");
                return false;
            }

            // Vérifier la structure des modules
            if (!validateModuleStructure(sheet)) {
                System.out.println("Échec de la validation de la structure des modules.");
                return false;
            }

            // Vérifier les cellules fusionnées
            if (!validateMergedCells(sheet)) {
                System.out.println("Échec de la validation des cellules fusionnées.");
                return false;
            }

            // Vérifier le contenu des données
            if (!validateDataContent(sheet)) {
                System.out.println("Échec de la validation du contenu des données.");
                return false;
            }

            System.out.println("Le fichier Excel respecte la structure et le contenu.");
            return true;

        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean validateHeaders(Sheet sheet) {
        Row headerRow = sheet.getRow(0);
        Row classRow = sheet.getRow(2);
        Row moduleHeaderRow = sheet.getRow(4);

        if (headerRow == null || classRow == null || moduleHeaderRow == null) {
            System.out.println("Une ou plusieurs lignes d'en-tête sont manquantes.");
            return false;
        }

        // Vérifier les en-têtes de la première ligne
        if (!getCellValue(headerRow, 0).equals("Annee universitaire")) {
            System.out.println("L'en-tête 'Annee universitaire' est manquant ou incorrect.");
            return false;
        }
        if (!getCellValue(headerRow, 2).equals("Date deliberation")) {
            System.out.println("L'en-tête 'Date deliberation' est manquant ou incorrect.");
            return false;
        }

        // Vérifier les en-têtes de la ligne de classe
        if (!getCellValue(classRow, 0).equals("Classe")) {
            System.out.println("L'en-tête 'Classe' est manquant ou incorrect.");
            return false;
        }

        // Vérifier les en-têtes des modules
        if (!getCellValue(moduleHeaderRow, 0).equals("ID ETUDIANT") ||
            !getCellValue(moduleHeaderRow, 1).equals("CNE") ||
            !getCellValue(moduleHeaderRow, 2).equals("NOM") ||
            !getCellValue(moduleHeaderRow, 3).equals("PRENOM")) {
            System.out.println("Les en-têtes des modules sont manquants ou incorrects.");
            return false;
        }

        return true;
    }

    @Override
    public boolean validateModuleStructure(Sheet sheet) {
        Row moduleHeaderRow = sheet.getRow(4);
        Row elementHeaderRow = sheet.getRow(5);

        if (moduleHeaderRow == null || elementHeaderRow == null) {
            System.out.println("Les lignes d'en-tête des modules ou des éléments sont manquantes.");
            return false;
        }

        int cellIndex = 4; // Commence à la colonne E (index 4)
        while (cellIndex < moduleHeaderRow.getLastCellNum()-2) {
            String moduleHeader = getCellValue(moduleHeaderRow, cellIndex);
            if (moduleHeader == null || !moduleHeader.contains("(")) {
                System.out.println("Le nom du module ou de l'enseignant est manquant ou incorrect à la colonne " + cellIndex);
                System.out.println(moduleHeader+moduleHeader.contains("("));
                return false;
            }

            // Vérifier les sous-en-têtes
            if (!getCellValue(elementHeaderRow, cellIndex).equals("nom element 1")) {
                System.out.println("L'élément 'nom element 1' est manquant ou incorrect à la colonne " + cellIndex);
                return false;
            }
            if (!getCellValue(elementHeaderRow, cellIndex + 1).equals("nom element 2")) {
                System.out.println("L'élément 'nom element 2' est manquant ou incorrect à la colonne " + (cellIndex + 1));
                return false;
            }

            cellIndex += 4; // Passer à la prochaine série de modules
        }

        return true;
    }

    @Override
    public boolean validateMergedCells(Sheet sheet) {
        Set<CellRangeAddress> expectedMergedRegions = new HashSet<>();

        // Cellules fusionnées pour les en-têtes des étudiants
        expectedMergedRegions.add(new CellRangeAddress(4, 5, 0, 0)); // ID ETUDIANT (A5:A6)
        expectedMergedRegions.add(new CellRangeAddress(4, 5, 1, 1)); // CNE (B5:B6)
        expectedMergedRegions.add(new CellRangeAddress(4, 5, 2, 2)); // NOM (C5:C6)
        expectedMergedRegions.add(new CellRangeAddress(4, 5, 3, 3)); // PRENOM (D5:D6)

        // Cellules fusionnées pour les modules
        int cellIndex = 4; // Commence à la colonne E (index 4)
        while (cellIndex < sheet.getRow(4).getLastCellNum() - 2) { // Ignorer les 2 dernières colonnes (Moyenne generale et Rang)
            expectedMergedRegions.add(new CellRangeAddress(4, 4, cellIndex, cellIndex + 1)); // Nom module + enseignant (fusion horizontale)
            expectedMergedRegions.add(new CellRangeAddress(4, 5, cellIndex + 2, cellIndex + 2)); // Moyenne (fusion verticale)
            expectedMergedRegions.add(new CellRangeAddress(4, 5, cellIndex + 3, cellIndex + 3)); // Validation (fusion verticale)
            cellIndex += 4; // Passer à la prochaine série de modules
        }

        // Cellules fusionnées pour "Moyenne generale" et "Rang"
        expectedMergedRegions.add(new CellRangeAddress(4, 5, cellIndex, cellIndex)); // Moyenne generale (Q5:Q6)
        expectedMergedRegions.add(new CellRangeAddress(4, 5, cellIndex + 1, cellIndex + 1)); // Rang (R5:R6)

        // Comparer avec les cellules fusionnées réelles
        for (CellRangeAddress mergedRegion : sheet.getMergedRegions()) {
            if (!expectedMergedRegions.contains(mergedRegion)) {
                System.out.println("La cellule fusionnée " + mergedRegion.formatAsString() + " n'est pas attendue.");
                return false;
            }
        }

        return true;
    }

    
    @Override
    public boolean validateDataContent(Sheet sheet) {
        // Commencer à la ligne 6 (première ligne de données)
        for (int rowIndex = 6; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
            Row row = sheet.getRow(rowIndex);
            if (row == null) {
                System.out.println("La ligne " + rowIndex + " est vide.");
                return false;
            }

            // Vérifier les données de l'étudiant
            for (int cellIndex = 0; cellIndex < row.getLastCellNum(); cellIndex++) {
                Cell cell = row.getCell(cellIndex);
                if (cell == null) {
                    System.out.println("La cellule à la ligne " + rowIndex + ", colonne " + cellIndex + " est vide.");
                    return false;
                }

                // Vérifier les types de données
                switch (cellIndex) {
                    case 0: // ID ETUDIANT
                    case 1: // CNE
                    case 2: // NOM
                    case 3: // PRENOM
                        if (cell.getCellType() != CellType.STRING) {
                            System.out.println("La cellule à la ligne " + rowIndex + ", colonne " + cellIndex + " doit contenir du texte.");
                            return false;
                        }
                        break;
                    case 4: // nom element 1
                    case 6: // moyenne
                    case 8: // nom element 1
                    case 10: // moyenne
                    case 12: // nom element 1
                    case 14: // moyenne
                        if (cell.getCellType() != CellType.STRING) {
                            System.out.println("La cellule à la ligne " + rowIndex + ", colonne " + cellIndex + " doit contenir un nombre.");
                            return false;
                        }
                        break;
                    case 5: // nom element 2
                    case 7: // validation
                    case 9: // nom element 2
                    case 11: // validation
                    case 13: // nom element 2
                    case 15: // validation
                        if (cell.getCellType() != CellType.STRING) {
                            System.out.println("La cellule à la ligne " + rowIndex + ", colonne " + cellIndex + " doit contenir du texte.");
                            return false;
                        }
                        break;
                    case 16: // Moyenne generale
                    case 17: // Rang
                        if (cell.getCellType() != CellType.STRING) {
                            System.out.println("La cellule à la ligne " + rowIndex + ", colonne " + cellIndex + " doit contenir un nombre.");
                            return false;
                        }
                        break;
                }
            }
        }

        return true;
    }

    @Override
    public String getCellValue(Row row, int cellIndex) {
        Cell cell = row.getCell(cellIndex);
        return cell == null ? null : cell.getStringCellValue();
    }
}