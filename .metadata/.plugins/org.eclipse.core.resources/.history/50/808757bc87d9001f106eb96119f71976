package com.example.demo.services.fichierexcel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

@Service
public class FichierExcelServiceimpl implements IFichierExcelService {

    @Override
    public void formatColonnes(File fichier, int nbr) throws Exception {
        try (FileInputStream fis = new FileInputStream(fichier);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Récupérer la première feuille
            Sheet sheet = workbook.getSheetAt(0);

            // Vérifier le nombre de colonnes
            Row firstRow = sheet.getRow(0);
            if (firstRow == null) {
                throw new IllegalArgumentException("La première ligne est vide.");
            }

            int nbrReelColonnes = firstRow.getPhysicalNumberOfCells();
            if (nbrReelColonnes != nbr) {
                throw new IllegalArgumentException("Nombre de colonnes incorrect. Attendu : " + nbr + ", Trouvé : " + nbrReelColonnes);
            }

        } catch (IOException e) {
            throw new Exception("Erreur lors de la lecture du fichier : " + e.getMessage(), e);
        }
    }

    @Override
    public void formatTypeDonnee(File fichier, String type, int colonne, int ligne) throws Exception {
        try (FileInputStream fis = new FileInputStream(fichier);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Récupérer la première feuille
            Sheet sheet = workbook.getSheetAt(0);

            // Vérifier la ligne spécifiée
            Row row = sheet.getRow(ligne);
            if (row == null) {
                throw new IllegalArgumentException("La ligne " + ligne + " est vide.");
            }

            // Vérifier la cellule spécifiée
            Cell cell = row.getCell(colonne, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            switch (type.toLowerCase()) {
                case "long":
                    validateLong(cell, ligne, colonne);
                    break;
                case "string":
                    validateString(cell, ligne, colonne);
                    break;
                case "inscription_reinscription":
                    validateInscriptionReinscription(cell, ligne, colonne);
                    break;
                default:
                    throw new IllegalArgumentException("Type de données non pris en charge : " + type);
            }

        } catch (IOException e) {
            throw new Exception("Erreur lors de la lecture du fichier : " + e.getMessage(), e);
        }
    }

    // Valider une cellule de type long
    private void validateLong(Cell cell, int ligne, int colonne) throws Exception {
        if (cell.getCellType() != CellType.NUMERIC || cell.getNumericCellValue() != (long) cell.getNumericCellValue()) {
            throw new Exception("Erreur à la ligne " + ligne + ", colonne " + colonne + " : La valeur doit être un entier long.");
        }
    }

    // Valider une cellule de type string
    private void validateString(Cell cell, int ligne, int colonne) throws Exception {
        if (cell.getCellType() != CellType.STRING || cell.getStringCellValue().trim().isEmpty()) {
            throw new Exception("Erreur à la ligne " + ligne + ", colonne " + colonne + " : La valeur doit être une chaîne de caractères non vide.");
        }
    }

    // Valider une cellule avec les valeurs "inscription" ou "reinscription"
    private void validateInscriptionReinscription(Cell cell, int ligne, int colonne) throws Exception {
        if (cell.getCellType() != CellType.STRING ||
            (!cell.getStringCellValue().equalsIgnoreCase("inscription") &&
             !cell.getStringCellValue().equalsIgnoreCase("reinscription"))) {
            throw new Exception("Erreur à la ligne " + ligne + ", colonne " + colonne + " : La valeur doit être 'inscription' ou 'reinscription'.");
        }
    }

}