package com.example.demo.services.Etudiant;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Niveau;
import com.example.demo.repositories.IEtudiant;
import com.example.demo.repositories.INiveau;
import com.example.demo.services.fichierexcel.IFichierExcelService;
@Service
public class EtudiantServiceimpl implements IEtudiantService{
	@Autowired
	private IFichierExcelService ifichierexcelservice;
	@Autowired
	private IEtudiant ietudiant;
	@Autowired
	private INiveau iNiveau;
	@Autowired
	private Etudiant etudiant;
	@Autowired
	private Optional<Niveau> niveau;
	@Override
	public boolean inscrir(File fichier) {
		List<String> liste=new ArrayList<>(Arrays.asList("String","String","String","String","NUMERIC","String"));
		try{
			if(checkFormat(fichier, liste)) {
				FileInputStream fis = new FileInputStream(fichier);
		         Workbook workbook = new XSSFWorkbook(fis);
		         Sheet sheet = workbook.getSheetAt(0);
		         for(int ligneIndex = 1;ligneIndex<=sheet.getLastRowNum();ligneIndex++) {
		        	 Row row = sheet.getRow(ligneIndex);
		        	 List<String> liste1=new ArrayList<>();
		        	 for(int colonneIndex=1;colonneIndex<6;colonneIndex++) {
		        		 Cell cell=row.getCell(colonneIndex);
		        		 liste1.add(cell.getStringCellValue());
		        	 }
		        	 etudiant.setId(Long.parseLong(liste1.get(0)));
		        	 etudiant.setCne(liste1.get(1));
		        	 etudiant.setNom(liste1.get(2));
		        	 etudiant.setPrenom(liste1.get(3));
		        	 niveau =iNiveau.findById(Long.parseLong(liste1.get(4)));
		        	 etudiant.setNiveau(niveau.get());
		         }
			}
			
		}catch(Exception e) {
			System.err.println(e.getMessage()+e);
			return false;
		}
		
		return true;
	}

	@Override
	public boolean checkFormat(File fichier, List<String> liste) {
	    try (FileInputStream fis = new FileInputStream(fichier);
	         Workbook workbook = new XSSFWorkbook(fis)) {

	        // Vérifier le format des colonnes
	        if (!ifichierexcelservice.formatColonnes(fichier, 6)) {
	            // Si les colonnes ne respectent pas le format, retourner false
	            return false;
	        }

	        Sheet sheet = workbook.getSheetAt(0);  // On travaille avec la première feuille

	        // Parcours des lignes à partir de la ligne 2 (index 1 dans Excel)
	        for (int ligneIndex = 1; ligneIndex <= sheet.getLastRowNum(); ligneIndex++) {
	            Row row = sheet.getRow(ligneIndex);

	            if (row == null) continue;  // Si la ligne est vide, on passe à la suivante

	            // Parcours des colonnes de chaque ligne
	            for (int colIndex = 0; colIndex < liste.size(); colIndex++) {
	                // Récupérer le type attendu depuis la liste
	                String typeAttendu = liste.get(colIndex);

	                // Récupérer le type réel de la cellule
	                String typeCellule = ifichierexcelservice.formatTypeDonnee(fichier, colIndex, ligneIndex);

	                // Comparer le type attendu avec le type réel
	                if (!typeAttendu.equals(typeCellule)) {
	                    // Si les types ne correspondent, retourner false
	                    System.err.println("Erreur à la ligne " + (ligneIndex + 1) + ", colonne " + (colIndex + 1) +
	                            ": Attendu '" + typeAttendu + "', trouvé '" + typeCellule + "'.");
	                    return false;
	                }
	            }
	        }

	        // Si tout est correct, retourner true
	        return true;

	    } catch (Exception e) {
	        // Si une exception est lancée, log l'erreur et retourner false
	        System.err.println("Erreur lors de la vérification du format: " + e.getMessage());
	        return false;
	    }
	}



	@Override
	public Etudiant chercherEtudiantById(Long id) {
		Optional<Etudiant> optionnalEtudiant=Optional.ofNullable(ietudiant.findById(id).orElse(null));
		return optionnalEtudiant.get();
	}

	@Override
	public List<Etudiant> chercherEtudiant(String cne,String nom,String prenom,Long niveau) {
		return ietudiant.findByCneOrNomOrPrenomOrNiveauId(cne, nom, prenom, niveau);
	}

	@Override
	public boolean checkExistanceNiveau(Long id) {
		if(!(iNiveau.findById(id).isEmpty())) {
			return true;
		}else {
			return false;
		}		
	}

	@Override
	public boolean checkNiveau() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean inscription(List<Etudiant> liste) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean reinscription(List<Etudiant> liste) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Etudiant modifierEtudiant(Long id,String cne, String nom, String prenom, Long niveau) {
		Optional<Etudiant> e=ietudiant.findById(id);
		if(!(e.isEmpty())){
			Etudiant e1=e.get();
			if(cne!=null) {e1.setCne(cne);}
			if(nom!=null) {e1.setNom(nom);}
			if(prenom!=null) {e1.setPrenom(prenom);}
			if(niveau!=null) {
				Optional<Niveau> n=iNiveau.findById(niveau);
				e1.setNiveau(n.get());
			}
			ietudiant.save(e1);
			return e1;
		}else {
			return null;
		}
	}

	@Override
	public List<Etudiant> consulterClasse() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public File exporter() {
		// TODO Auto-generated method stub
		return null;
	}

}
