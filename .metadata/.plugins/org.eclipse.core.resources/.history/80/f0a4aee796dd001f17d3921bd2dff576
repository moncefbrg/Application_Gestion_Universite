package com.example.demo.services.collectenotes;

import java.io.File;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entities.Classe;
import com.example.demo.entities.Etudiant;
import com.example.demo.repositories.IClasse;
import com.example.demo.repositories.IEtudiant;
import com.example.demo.entities.ResultatElement;
import com.example.demo.entities.Module;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class ServiceCollecteNotesImpl implements IServiceCollecteNotes {
	@Autowired
	private IEtudiant etudiantRepository;
	@Autowired
	private IClasse classeRepository;

	@Override
	public File genererFichierCollecteNotes(String session, String classe) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public File genererFichierDeliberation(String niveau, String session) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public File genererArchiveFichiersModulesPourNiveau(String niveau, String session) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
    
	@Override
	public List<Double> recupererNotesEtudiant(Long idEtudiant) throws Exception {
	    // 1. Récupérer l'étudiant par son ID
	    Etudiant etudiant = etudiantRepository.findById(idEtudiant)
	        .orElseThrow(() -> new Exception("Étudiant introuvable !!!"));

	    // 2. Récupérer les modules de l'étudiant
	    List<Module> modules = etudiant.getModules();

	    // 3. Parcourir les modules, les éléments et les résultats pour récupérer les notes
	    List<Double> notes = modules.stream()
	        .flatMap(module -> module.getElements().stream()) // Parcourir les modules
	        .flatMap(element -> element.getResultatsElements().stream())
	        .filter(resultat -> resultat.getEtudiant().getId().equals(idEtudiant))
	        .map(ResultatElement::getNote) // Récupérer les notes
	        .collect(Collectors.toList());

	    return notes;
	}


	@Override
	public void mettreAJourNotesEtudiantDansFichier(File fichier, Long idetudiant, double nouvelleNote)
			throws Exception {
		// TODO Auto-generated method stub
		
	}

	/*@Override
	public void mettreAJourNotesEtudiantDansFichier(File fichier, Long idetudiant, double nouvelleNote)
			throws Exception {
		    // Récupérer l'étudiant par son ID
		    Etudiant etudiant = etudiantRepository.findById(idEtudiant).orElseThrow(() -> new Exception("Étudiant introuvable"));
		    
		    // Ouvrir le fichier Excel et localiser la ligne de l'étudiant
		    Workbook workbook = WorkbookFactory.create(fichier);
		    Sheet sheet = workbook.getSheetAt(0); // Supposons que les notes sont dans la première feuille
		    
		    for (Row row : sheet) {
		        String nomEtudiant = row.getCell(0).getStringCellValue();
		        if (nomEtudiant.equals(etudiant.getNom())) {
		            // Mettre à jour la note dans la cellule correspondante
		            row.getCell(2).setCellValue(nouvelleNote); // Exemple: colonne 2 = "Note Module"
		        }
		    }
		    
		    // Sauvegarder le fichier mis à jour
		    FileOutputStream fileOut = new FileOutputStream(fichier);
		    workbook.write(fileOut);
		    fileOut.close();
		}

		
	}*/
	

	@Override
	public List<Long> recupererIdsEtudiantsClasse(String nomClasse) throws Exception {
	    Classe classe=classeRepository.findByNom(nomClasse)
	            .orElseThrow(() -> new Exception("Classe introuvable !!!!"));

	    List<Long> idsEtudiants=classe.getEtudiants().stream()
	            .map(Etudiant::getId)
	            .collect(Collectors.toList());

	    return idsEtudiants;
	}

}
