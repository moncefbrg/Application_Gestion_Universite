package com.example.demo.logging.aspect;

import com.example.demo.entities.Etudiant;
import com.example.demo.logging.services.HistoriqueEtudiantService;
import com.example.demo.logging.services.LogService;
import com.example.demo.repositories.IEtudiant;

import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    @Autowired
    private LogService logService;
    @Autowired
    private HistoriqueEtudiantService historiqueEtudiantService;
    @Autowired
    private IEtudiant iEtudiant;
    private Etudiant ancienEtudiant;

    @After("execution(* com.example.demo.services.*.*.*(..)) || execution(* com.example.demo.security.services.Utilisateur.UtilisateurService.*(..))")    
    public void logAfter(JoinPoint joinPoint) {
    	// Récupère la signature de la méthode
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        String methodName = signature.getMethod().getName(); // Nom de la méthode
        //Class<?>[] parameterTypes = signature.getMethod().getParameterTypes(); // Types des paramètres
        Object[] args = joinPoint.getArgs(); // Valeurs des paramètres
        String message = methodName+ Arrays.toString(args);
        logService.saveLog(message);
    }
    
    @After("execution(* com.example.demo.services.Etudiant.EtudiantServiceImpl.modifierEtudiant(..))")    
    public void historiqueEtudianAfter(JoinPoint joinPoint) {
    	// Récupère la signature de la méthode
        Object[] args = joinPoint.getArgs(); // Valeurs des paramètres
        String oldvalues="";
        String newValues = Arrays.toString(args);
        historiqueEtudiantService.saveHistoriqueEtudiant(oldvalues,newValues);
    }
    @Before("execution(* com.example.demo.services.Etudiant.EtudiantServiceImpl.modifierEtudiant(..)) ")
    public void avantModification(JoinPoint joinPoint, Long id,String cne,String nom,String prenom,Long niveau) {
       if(iEtudiant.findById(id).isPresent()) {
    	   ancienEtudiant=iEtudiant.findById(id).get();
       }

        System.out.println("Anciennes valeurs : " + ancienEtudiant);
        System.out.println("Nouvelles valeurs : id=" + id + ", nom=" + newNom + ", prenom=" + newPrenom);
    }
}