package com.example.demo.services.Etudiant;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Year;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.example.demo.entities.Classe;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Niveau;
import com.example.demo.repositories.IClasse;
import com.example.demo.repositories.IEtudiant;
import com.example.demo.repositories.INiveau;
import com.example.demo.services.fichierexcel.IFichierExcelService;

import jakarta.transaction.Transactional;
@Service
public class EtudiantServiceimpl implements IEtudiantService{
	@Autowired
	private IFichierExcelService ifichierexcelservice;
	@Autowired
	private IEtudiant ietudiant;
	@Autowired
	private INiveau iNiveau;
	@Autowired
	private IClasse iClasse;
	@Transactional
	@Override
	public boolean inscrire(File fichier,List<String> listeTypeColonnes,int nbrColonnes) {
	    return inscription(fichier,listeTypeColonnes,nbrColonnes);
	}


	/**
	 * Crée et sauvegarde un étudiant à partir des données d'une ligne.
	 */
	@Override @Transactional
	public boolean creerEtSauvegarderEtudiantFromExcel(List<String> ligneData) {
	    try {
	        // Récupérer les données de la ligne
	        Long idEtudiant = Long.parseLong(ligneData.get(0)); // ID Etudiant (Long)
	        String cne = ligneData.get(1); // CNE (String)
	        String nom = ligneData.get(2); // NOM (String)
	        String prenom = ligneData.get(3); // PRENOM (String)
	        Long idNiveau = Long.parseLong(ligneData.get(4)); // ID NIVEAU ACTUEL (Long)
	        String type = ligneData.get(5); // TYPE (String)

	        // Vérifier si le niveau existe
	        Optional<Niveau> niveauOpt = iNiveau.findById(idNiveau);
	        if (niveauOpt.isEmpty()) {
	            System.err.println("Niveau non trouvé pour l'ID : " + idNiveau);
	            return false;
	        }
	        Niveau niveau = niveauOpt.get();

	        // Vérifier si l'étudiant existe déjà
	        Optional<Etudiant> etudiantOpt = ietudiant.findById(idEtudiant);

	        // Traiter en fonction du type
	        if ("Inscription".equalsIgnoreCase(type)) {
	            // Cas : Inscription
	            if (etudiantOpt.isPresent()) {
	                System.err.println("Erreur : L'étudiant avec l'ID " + idEtudiant + " existe déjà. Impossible de l'inscrire.");
	                return false;
	            }

	            // Créer un nouvel étudiant
	            Etudiant etudiant = new Etudiant();
	            etudiant.setId(idEtudiant); // ID (Long)
	            etudiant.setCne(cne); // CNE (String)
	            etudiant.setNom(nom); // NOM (String)
	            etudiant.setPrenom(prenom); // PRENOM (String)
	            etudiant.setNiveau(niveau); // Niveau

	            // Sauvegarder l'étudiant dans la base de données
	            ietudiant.save(etudiant);
	            System.out.println("Étudiant inscrit : " + etudiant);
	        } else if ("Reinscription".equalsIgnoreCase(type) || "Réinscription".equalsIgnoreCase(type)) {
	            // Cas : Reinscription
	            if (etudiantOpt.isEmpty()) {
	                System.err.println("Erreur : L'étudiant avec l'ID " + idEtudiant + " n'existe pas. Impossible de le réinscrire.");
	                return false;
	            }

	            // Modifier le niveau de l'étudiant existant
	            Etudiant etudiant = etudiantOpt.get();
	            etudiant.setNiveau(niveau); // Mettre à jour le niveau

	            // Sauvegarder les modifications
	            ietudiant.save(etudiant);
	            System.out.println("Étudiant réinscrit : " + etudiant);
	        } else {
	            System.err.println("Type non reconnu : " + type);
	            return false;
	        }

	        return true;

	    } catch (Exception e) {
	        System.err.println("Erreur lors de la création ou de la modification de l'étudiant : " + e.getMessage());
	        return false;
	    }
	}

	

	@Override
	public Etudiant chercherEtudiantById(Long id) {
		Optional<Etudiant> optionnalEtudiant=Optional.ofNullable(ietudiant.findById(id).orElse(null));
		return optionnalEtudiant.get();
	}

	@Override
	public List<Etudiant> chercherEtudiant(String cne,String nom,String prenom,Long niveau) {
		return ietudiant.findByCneOrNomOrPrenomOrNiveauId(cne, nom, prenom, niveau);
	}

	@Override
	public boolean checkExistanceNiveau(Long id) {
		if(!(iNiveau.findById(id).isEmpty())) {
			return true;
		}else {
			return false;
		}		
	}

	@Override
	public boolean checkNiveau() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean inscription(File fichier,List<String> liste,int nbrColonnes) {
		try {
	        // Vérifier le format du fichier
	        if (!ifichierexcelservice.checkFormat(fichier, liste,nbrColonnes)) {
	            System.err.println("Le format du fichier n'est pas valide.");
	            return false;
	        }

	        // Lire le fichier et traiter les données
	        try (FileInputStream fis = new FileInputStream(fichier);
	             Workbook workbook = new XSSFWorkbook(fis)) {

	            Sheet sheet = workbook.getSheetAt(0);
	            for (int ligneIndex = 1; ligneIndex <= sheet.getLastRowNum(); ligneIndex++) {
	                Row row = sheet.getRow(ligneIndex);
	                if (row == null) continue; // Ignorer les lignes vides

	                // Lire les données de la ligne
	                List<String> ligneData = ifichierexcelservice.lireLigne(row,nbrColonnes);

	                // Créer et sauvegarder l'étudiant
	                if (!creerEtSauvegarderEtudiantFromExcel(ligneData)) {
	                    System.err.println("Erreur lors de la création de l'étudiant à la ligne : " + (ligneIndex + 1));
	                }
	            }
	        }
	    } catch (Exception e) {
	        // Gérer les exceptions
	        System.err.println("Erreur lors de l'inscription des étudiants : " + e.getMessage());
	        return false;
	    }

	    return true;
	}
	
	@Override @Transactional
	public Etudiant modifierEtudiant(Long id,String cne, String nom, String prenom, Long niveau) {
		Optional<Etudiant> e=ietudiant.findById(id);
		if(!(e.isEmpty())){
			Etudiant e1=e.get();
			if(cne!=null) {e1.setCne(cne);}
			if(nom!=null) {e1.setNom(nom);}
			if(prenom!=null) {e1.setPrenom(prenom);}
			if(niveau!=null) {
				Optional<Niveau> n=iNiveau.findById(niveau);
				e1.setNiveau(n.get());
			}
			ietudiant.save(e1);
			return e1;
		}else {
			return null;
		}
	}

	@Override
	public List<Etudiant> consulterClasse() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public File exporter() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
    public File creationFichierNoteExcel(String classe, String session, String enseignant, String semestre, String module, String path) throws IOException {
        // Créer un nouveau classeur Excel
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Notes");

        // Obtenir l'année actuelle et l'année suivante
        Year currentYear = Year.now();
        String anneeScolaire = currentYear + "/" + (currentYear.getValue() + 1);

        // Créer une police pour le style des en-têtes
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 12);
        headerFont.setColor(IndexedColors.WHITE.getIndex()); // Texte en blanc

        // Créer un style pour les en-têtes
        CellStyle headerCellStyle = workbook.createCellStyle();
        headerCellStyle.setFont(headerFont);
        headerCellStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex()); // Fond bleu clair
        headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerCellStyle.setBorderTop(BorderStyle.THIN); // Bordure en haut
        headerCellStyle.setBorderBottom(BorderStyle.THIN); // Bordure en bas
        headerCellStyle.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
        headerCellStyle.setBorderRight(BorderStyle.THIN); // Bordure à droite
        headerCellStyle.setAlignment(HorizontalAlignment.CENTER); // Centrer le texte

        // Créer un style pour la ligne vide
        CellStyle laLigneVide = workbook.createCellStyle();
        laLigneVide.setFillForegroundColor(IndexedColors.GREY_40_PERCENT.getIndex()); // Fond gris
        laLigneVide.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        laLigneVide.setBorderTop(BorderStyle.THIN); // Bordure en haut
        laLigneVide.setBorderBottom(BorderStyle.THIN); // Bordure en bas
        laLigneVide.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
        laLigneVide.setBorderRight(BorderStyle.THIN); // Bordure à droite

        // Créer un style pour les cellules de données
        CellStyle dataCellStyle = workbook.createCellStyle();
        dataCellStyle.setBorderTop(BorderStyle.THIN); // Bordure en haut
        dataCellStyle.setBorderBottom(BorderStyle.THIN); // Bordure en bas
        dataCellStyle.setBorderLeft(BorderStyle.THIN); // Bordure à gauche
        dataCellStyle.setBorderRight(BorderStyle.THIN); // Bordure à droite
        dataCellStyle.setAlignment(HorizontalAlignment.CENTER); // Centrer le texte

        // Créer la première ligne pour les en-têtes
        Row headerRow1 = sheet.createRow(0);
        String[] headers1 = {"Module", module, "Semestre", semestre, "Année", anneeScolaire};
        for (int i = 0; i < headers1.length; i++) {
            Cell cell = headerRow1.createCell(i);
            cell.setCellValue(headers1[i]);
            cell.setCellStyle(headerCellStyle);
        }

        // Créer la deuxième ligne pour les en-têtes
        Row headerRow2 = sheet.createRow(1);
        String[] headers2 = {"Enseignant", enseignant, "Session", session, "Classe", classe};
        for (int i = 0; i < headers2.length; i++) {
            Cell cell = headerRow2.createCell(i);
            cell.setCellValue(headers2[i]);
            cell.setCellStyle(headerCellStyle);
        }

        // Créer une ligne vide avec un fond gris
        Row headerRowVide = sheet.createRow(2);
        for (int i = 0; i < headers1.length; i++) {
            Cell cell = headerRowVide.createCell(i);
            cell.setCellStyle(laLigneVide); // Appliquer le style de la ligne vide
        }

        // Créer la quatrième ligne pour les en-têtes
        Row headerRow4 = sheet.createRow(3);
        String[] headers4 = {"ID", "CNE", "NOM", "PRENOM", "ELEMENT 1", "ELEMENT 2", "MOYENNE", "VALIDATION"};
        for (int i = 0; i < headers4.length; i++) {
            Cell cell = headerRow4.createCell(i);
            cell.setCellValue(headers4[i]);
            cell.setCellStyle(headerCellStyle);
        }

     // Exemple de données (à remplacer par vos données réelles)
        Row dataRow = sheet.createRow(4);
        String[] data = {"1", "A12345", "Dupont", "Jean"}; // Données pour ID, CNE, NOM, PRENOM
        double[] suiteData = {15.5, 18.2}; // Données pour ELEMENT 1 et ELEMENT 2

        // Remplir les données pour ID, CNE, NOM, PRENOM
        for (int i = 0; i < data.length; i++) {
            Cell cell = dataRow.createCell(i);
            cell.setCellValue(data[i]);
            cell.setCellStyle(dataCellStyle); // Appliquer le style
        }

        // Remplir les données pour ELEMENT 1 et ELEMENT 2
        for (int i = 0; i < suiteData.length; i++) {
            Cell cell = dataRow.createCell(4 + i); // Colonnes E (index 4) et F (index 5)
            cell.setCellValue(suiteData[i]);
            cell.setCellStyle(dataCellStyle); // Appliquer le style
        }

        // Ajouter la formule pour la MOYENNE (colonne G)
        Cell moyenneCell = dataRow.createCell(6); // Colonne G (index 6)
        moyenneCell.setCellFormula("SUM(E5,F5)/2"); // Formule pour la moyenne de ELEMENT 1 et ELEMENT 2
        moyenneCell.setCellStyle(dataCellStyle);

        // Ajouter la formule pour la VALIDATION (colonne H)
        Cell validationCell = dataRow.createCell(7); // Colonne H (index 7)
        validationCell.setCellFormula("IF(G5>=10,\"Validé\",\"Non validé\")"); // Formule pour la validation
        validationCell.setCellStyle(dataCellStyle);
        // Ajuster la largeur des colonnes
        for (int i = 0; i < headers4.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Créer le dossier s'il n'existe pas
        File resourcesDir = new File(path);
        if (!resourcesDir.exists()) {
            resourcesDir.mkdirs();
        }

        // Générer un nom de fichier unique
        String baseFileName = "Notes_" + classe + "_" + session;
        String fileExtension = ".xlsx";
        File file = new File(path + File.separator + baseFileName + fileExtension);

        // Vérifier si le fichier existe déjà
        int counter = 1;
        while (file.exists()) {
            file = new File(path + File.separator + baseFileName + "_" + counter + fileExtension);
            counter++;
        }

        // Écrire le fichier Excel
        try (FileOutputStream fileOut = new FileOutputStream(file)) {
            workbook.write(fileOut);
        } finally {
            workbook.close();
        }

        return file;
    }
	@Override
	public boolean ajouterEtudiant(Long id, String nom, String prenom, String cne, String aliasNiveau, String nomClasse) throws Exception {
	    // Trouver la classe par son nom
	    Optional<Classe> oc = iClasse.findByNom(nomClasse);
	    if (!oc.isPresent()) {
	        throw new Exception("Classe avec le nom '" + nomClasse + "' non trouvée.");
	    }
	    Classe classe = oc.get(); // Récupère l'objet Classe

	    // Trouver le niveau par son alias
	    Niveau niveau = iNiveau.findByAlias(aliasNiveau);
	    if (niveau == null) {
	        throw new Exception("Niveau avec l'alias '" + aliasNiveau + "' non trouvé.");
	    }

	    // Récupérer les modules du niveau (s'il y en a)
	    List<Module> modules = niveau.getModules(); // Pas besoin de stream si on a déjà une liste

	    // Créer l'étudiant
	    Etudiant etudiant = new Etudiant();
	    etudiant.setId(id);
	    etudiant.setNom(nom);
	    etudiant.setPrenom(prenom);
	    etudiant.setCne(cne);
	    etudiant.setClasse(classe);
	    etudiant.setNiveau(niveau);
	    
	    // Enregistrer l'étudiant (supposant que tu as un repository pour cela)
	    ietudiant.save(etudiant); // Si tu utilises Spring Data, cela pourrait ressembler à ça

	    return true; // Retourner true si l'étudiant a été ajouté avec succès
	}


}