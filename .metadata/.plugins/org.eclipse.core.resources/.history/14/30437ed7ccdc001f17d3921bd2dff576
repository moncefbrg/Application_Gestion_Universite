package com.example.demo.services.niveau;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.entities.Module;
import com.example.demo.entities.Formule;
import com.example.demo.entities.Niveau;
import com.example.demo.entities.Seuil;
import com.example.demo.repositories.IFormule;
import com.example.demo.repositories.IModule;
import com.example.demo.repositories.INiveau;
@Service
public class NiveauServiceImpl implements INiveauService{
	@Autowired
	private INiveau iNiveau;
	@Autowired
	private IFormule iFormule;
	@Autowired
	private IModule iModule;
	@Transactional
	@Override
	public Niveau creerNiveau(Long id, String nom, String alias, Niveau niveauSuivant, List<Module> modules, Seuil seuil, List<Formule> formules) throws Exception {
	    // Vérifier si un niveau avec le même ID existe déjà
	    if (iNiveau.findById(id).isPresent()) {
	        throw new RuntimeException("Un niveau avec l'ID " + id + " existe déjà.");
	    }

	    // Vérifier si un niveau avec le même nom existe déjà
	    if (iNiveau.findByNom(nom).isPresent()) {
	        throw new RuntimeException("Un niveau avec le nom " + nom + " existe déjà.");
	    }

	    // Vérifier si un niveau avec le même alias existe déjà
	    if (iNiveau.findByAlias(alias).isPresent()) {
	        throw new RuntimeException("Un niveau avec l'alias " + alias + " existe déjà.");
	    }

	    // Vérifier si tous les modules existent
	    List<String> modulesManquants = modules.stream()
	            .map(Module::getNom)
	            .filter(moduleNom -> iModule.findByNom(moduleNom).isEmpty())
	            .collect(Collectors.toList());

	    if (!modulesManquants.isEmpty()) {
	        throw new RuntimeException("Les modules suivants n'existent pas : " + modulesManquants);
	    }

	    // Vérifier si le niveau suivant existe
	    if (niveauSuivant != null && iNiveau.findById(niveauSuivant.getId()).isEmpty()) {
	        throw new RuntimeException("Le niveau suivant avec l'ID " + niveauSuivant.getId() + " n'existe pas.");
	    }
	    
	    // Créer le niveau avec le Builder
	    Niveau niveau = Niveau.builder()
	            .id(id)
	            .nom(nom)
	            .alias(alias)
	            .niveauSuivant(niveauSuivant)
	            .modules(modules)
	            .seuil(seuil)
	            .build();

	    // Sauvegarder le niveau
	    iNiveau.save(niveau);

	    // Vérifier et lier les formules
	    for (Formule f : formules) {
	        // Vérifier si la formule existe avant de l'affecter
	        Formule f1 = iFormule.findById(f.getId()).orElseThrow(() -> new RuntimeException("La formule avec l'ID " + f.getId() + " n'existe pas."));
	        f1.setNiveau(niveau); // Associer la formule au niveau
	        iFormule.save(f1); // Sauvegarder la formule mise à jour
	    }

	    return niveau;
	}
	@Override
	@Transactional
	public boolean modifierNiveau(Long id, String nom, String alias, Niveau niveauSuivant, List<Module> modules, Seuil seuil, List<Formule> formules) throws Exception {
	    // Vérifier qu'au moins l'ID ou l'alias est fourni
	    if (id == null && (alias == null || alias.trim().isEmpty())) {
	        throw new IllegalArgumentException("L'ID ou l'alias du niveau doit être fourni.");
	    }

	    // Rechercher le niveau par son ID ou son alias
	    Optional<Niveau> niveauOptional;
	    if (id != null) {
	        niveauOptional = iNiveau.findById(id);
	    } else {
	        niveauOptional = iNiveau.findByAlias(alias);
	    }

	    // Vérifier si le niveau existe
	    if (niveauOptional.isEmpty()) {
	        throw new RuntimeException("Le niveau n'existe pas.");
	    }

	    // Récupérer le niveau à modifier
	    Niveau niveau = niveauOptional.get();

	    // Mettre à jour les attributs du niveau (uniquement si les valeurs ne sont pas null)
	    if (nom != null && !nom.trim().isEmpty()) {
	        // Vérifier si un niveau avec le même nom existe déjà (autre que celui en cours de modification)
	        Optional<Niveau> niveauAvecMemeNom = iNiveau.findByNom(nom);
	        if (niveauAvecMemeNom.isPresent() && !niveauAvecMemeNom.get().getId().equals(niveau.getId())) {
	            throw new RuntimeException("Un niveau avec le nom " + nom + " existe déjà.");
	        }
	        niveau.setNom(nom);
	    }

	    if (alias != null && !alias.trim().isEmpty()) {
	        // Vérifier si un niveau avec le même alias existe déjà (autre que celui en cours de modification)
	        Optional<Niveau> niveauAvecMemeAlias = iNiveau.findByAlias(alias);
	        if (niveauAvecMemeAlias.isPresent() && !niveauAvecMemeAlias.get().getId().equals(niveau.getId())) {
	            throw new RuntimeException("Un niveau avec l'alias " + alias + " existe déjà.");
	        }
	        niveau.setAlias(alias);
	    }

	    if (niveauSuivant != null) {
	        // Vérifier si le niveau suivant existe
	        if (iNiveau.findById(niveauSuivant.getId()).isEmpty()) {
	            throw new RuntimeException("Le niveau suivant avec l'ID " + niveauSuivant.getId() + " n'existe pas.");
	        }
	        niveau.setNiveauSuivant(niveauSuivant);
	    }

	    if (modules != null && !modules.isEmpty()) {
	        // Vérifier si tous les modules existent
	        List<String> modulesManquants = modules.stream()
	                .map(Module::getNom)
	                .filter(moduleNom -> iModule.findByNom(moduleNom).isEmpty())
	                .collect(Collectors.toList());

	        if (!modulesManquants.isEmpty()) {
	            throw new RuntimeException("Les modules suivants n'existent pas : " + modulesManquants);
	        }
	        niveau.setModules(modules);
	    }

	    if (seuil != null) {
	        niveau.setSeuil(seuil);
	    }

	    if (formules != null) {
	        niveau.setFormules(formules);
	    }

	    // Sauvegarder le niveau (automatiquement géré par @Transactional)
	    iNiveau.save(niveau);

	    return true; // Retourne true si la modification est réussie
	}
	@Override
	@Transactional
	public boolean supprimerNiveau(String nom) {
	    // Vérifier que le nom n'est pas null ou vide
	    if (nom == null || nom.trim().isEmpty()) {
	        throw new IllegalArgumentException("Le nom du niveau ne peut pas être null ou vide.");
	    }

	    // Rechercher le niveau par son nom
	    Optional<Niveau> niveauOptional = iNiveau.findByNom(nom);
	    if (niveauOptional.isEmpty()) {
	        throw new RuntimeException("Le niveau avec le nom " + nom + " n'existe pas.");
	    }

	    // Récupérer le niveau à supprimer
	    Niveau niveau = niveauOptional.get();

	    // Vérifier si ce niveau est utilisé comme niveau suivant dans d'autres niveaux
	    List<Niveau> niveauxDependants = iNiveau.findByNiveauSuivant(niveau);
	    if (!niveauxDependants.isEmpty()) {
	        throw new RuntimeException("Le niveau " + nom + " est utilisé comme niveau suivant dans d'autres niveaux et ne peut pas être supprimé.");
	    }

	    // Supprimer le niveau
	    iNiveau.delete(niveau);

	    return true; // Retourne true si la suppression est réussie
	}
}
