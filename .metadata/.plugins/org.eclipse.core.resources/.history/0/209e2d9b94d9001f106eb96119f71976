package com.example.demo.services.Etudiant;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.File;
import java.io.FileInputStream;
import java.util.List;

import com.example.demo.entities.Etudiant;
import com.example.demo.services.fichierexcel.IFichierExcelService;

public class EtudiantServiceimpl implements IEtudiantService{
	@Autowired
	private IFichierExcelService ifichierexcelservice;
	@Override
	public boolean inscrir(File fichier) {
		// TODO Auto-generated method stub
		return false;
		
	}

	@Override
	public String checkFormat(File fichier ,List<String> liste)throws Exception {
		try {
			if(ifichierexcelservice.formatColonnes(fichier,6)){
				try(FileInputStream fis = new FileInputStream(fichier);
			             Workbook workbook = new XSSFWorkbook(fis)){
					Sheet sheet = workbook.getSheetAt(0);  // On travaille avec la première feuille

		            // Parcours des lignes à partir de la ligne 2 (index 1 dans Excel)
		            for (int ligneIndex = 1; ligneIndex <= sheet.getLastRowNum(); ligneIndex++) {
		                Row row = sheet.getRow(ligneIndex);

		                if (row == null) continue;  // Si la ligne est vide, on passe à la suivante

		                // Parcours des colonnes de chaque ligne
		                for (int colIndex = 0; colIndex < liste.size(); colIndex++) {
		                    Cell cell = row.getCell(colIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);

		                    // Récupérer le type attendu depuis la liste
		                    String typeAttendu = liste.get(colIndex);

		                    // Récupérer le type réel de la cellule
		                    String typeCellule = ifichierexcelservice.formatTypeDonnee(fichier, colIndex, ligneIndex);

		                    // Comparer le type attendu avec le type réel
		                    if (!typeAttendu.equals(typeCellule)) {
		                        throw new IllegalArgumentException("Erreur à la ligne " + (ligneIndex + 1) + ", colonne " + (colIndex + 1) +
		                                    ": Attendu '" + typeAttendu + "', trouvé '" + typeCellule + "'.");

				}
				
			}
		}catch(Exception e) {
			System.out.println(e.getMessage()+e);
		}
		return null;
    }




	@Override
	public Etudiant chercherEtudiantById(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Etudiant chercherEtudiant(String cne,String nom,String prenom) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean checkExistanceNiveau(Long id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean checkNiveau() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean inscription(List<Etudiant> liste) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean reinscription(List<Etudiant> liste) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Etudiant modifierEtudiant(String cne, String nom, String prenom, Long niveau) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Etudiant> consulterClasse() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public File exporter() {
		// TODO Auto-generated method stub
		return null;
	}

}
